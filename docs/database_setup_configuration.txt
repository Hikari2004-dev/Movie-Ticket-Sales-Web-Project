=================================================================
DATABASE SETUP & CONFIGURATION GUIDE
=================================================================
Dự án: Movie Ticket Sales Web Project
Phiên bản: 1.0
Ngày tạo: 2025-10-13
=================================================================

Hướng dẫn này cung cấp các bước chi tiết để thiết lập database MySQL và cấu hình
Spring Boot application để kết nối với database đã tạo.

=================================================================
1. DATABASE SETUP
=================================================================

1.1. Tạo Database trong MySQL
---------------------------------------

Mở MySQL Command Line hoặc MySQL Workbench và chạy lệnh sau:

```sql
-- Tạo database
CREATE DATABASE IF NOT EXISTS movie_ticket_sales 
CHARACTER SET utf8mb4 
COLLATE utf8mb4_unicode_ci;

-- Chọn database để sử dụng
USE movie_ticket_sales;
```

1.2. Tạo User và Phân quyền (Optional nhưng khuyến nghị)
---------------------------------------

```sql
-- Tạo user chuyên dụng cho ứng dụng
CREATE USER 'movie_app_user'@'localhost' IDENTIFIED BY 'MovieTicket2025!';
CREATE USER 'movie_app_user'@'%' IDENTIFIED BY 'MovieTicket2025!';

-- Cấp quyền đầy đủ cho database
GRANT ALL PRIVILEGES ON movie_ticket_sales.* TO 'movie_app_user'@'localhost';
GRANT ALL PRIVILEGES ON movie_ticket_sales.* TO 'movie_app_user'@'%';

-- Áp dụng thay đổi
FLUSH PRIVILEGES;
```

1.3. Chạy Database Schema Script
---------------------------------------

Copy toàn bộ nội dung của file `database.sql` (đã được tạo trước đó) và chạy trong MySQL:

```bash
# Nếu sử dụng command line
mysql -u root -p movie_ticket_sales < database.sql

# Hoặc copy paste vào MySQL Workbench/phpMyAdmin
```

=================================================================
2. SPRING BOOT APPLICATION CONFIGURATION
=================================================================

2.1. Cấu hình application.properties
---------------------------------------

Cập nhật file `src/main/resources/application.properties`:

```properties
# ================================================================
# DATABASE CONFIGURATION
# ================================================================
spring.application.name=Movie Ticket Sales Web Project

# MySQL Database Configuration
spring.datasource.url=jdbc:mysql://localhost:3306/movie_ticket_sales?useSSL=false&serverTimezone=Asia/Ho_Chi_Minh&allowPublicKeyRetrieval=true&useUnicode=true&characterEncoding=utf8mb4
spring.datasource.username=movie_app_user
spring.datasource.password=MovieTicket2025!
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# Connection Pool Configuration (HikariCP)
spring.datasource.hikari.connection-timeout=20000
spring.datasource.hikari.minimum-idle=5
spring.datasource.hikari.maximum-pool-size=20
spring.datasource.hikari.idle-timeout=300000
spring.datasource.hikari.max-lifetime=1200000
spring.datasource.hikari.auto-commit=true

# JPA/Hibernate Configuration
spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect
spring.jpa.hibernate.ddl-auto=validate
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.use_sql_comments=true
spring.jpa.properties.hibernate.jdbc.batch_size=20
spring.jpa.properties.hibernate.order_inserts=true
spring.jpa.properties.hibernate.order_updates=true
spring.jpa.properties.hibernate.jdbc.batch_versioned_data=true

# Enable JPA Auditing
spring.jpa.properties.hibernate.envers.audit_table_suffix=_audit
spring.jpa.properties.hibernate.envers.revision_field_name=revision_id
spring.jpa.properties.hibernate.envers.revision_type_field_name=revision_type

# ================================================================
# APPLICATION CONFIGURATION
# ================================================================

# Server Configuration
server.port=8080
server.servlet.context-path=/api/v1
server.servlet.encoding.charset=UTF-8
server.servlet.encoding.enabled=true
server.servlet.encoding.force=true

# JSON Configuration
spring.jackson.date-format=yyyy-MM-dd HH:mm:ss
spring.jackson.time-zone=Asia/Ho_Chi_Minh
spring.jackson.locale=vi_VN
spring.jackson.serialization.write-dates-as-timestamps=false
spring.jackson.serialization.fail-on-empty-beans=false

# Validation Configuration
spring.mvc.throw-exception-if-no-handler-found=true
spring.web.resources.add-mappings=false

# File Upload Configuration
spring.servlet.multipart.enabled=true
spring.servlet.multipart.max-file-size=10MB
spring.servlet.multipart.max-request-size=15MB

# ================================================================
# SECURITY CONFIGURATION
# ================================================================

# JWT Configuration
jwt.secret=MovieTicketSalesSecretKey2025!ThisIsAVeryLongSecretKeyForJWTTokenGeneration
jwt.expiration=86400000
jwt.refresh-expiration=604800000

# Password Encryption
app.security.password.strength=10
app.security.max-failed-attempts=5
app.security.lockout-duration=15

# ================================================================
# BUSINESS LOGIC CONFIGURATION
# ================================================================

# Booking Configuration
app.booking.seat-hold-duration-minutes=10
app.booking.max-tickets-per-booking=8
app.booking.cancel-deadline-minutes=60
app.booking.service-fee-percentage=3.0

# Loyalty Points Configuration
app.loyalty.points-to-vnd-rate=1000
app.loyalty.default-earn-rate=1.0
app.loyalty.points-expiry-months=24

# Payment Configuration
app.payment.vnpay.enabled=true
app.payment.momo.enabled=true
app.payment.zalopay.enabled=true

# Notification Configuration
app.notification.email.enabled=true
app.notification.sms.enabled=true
app.notification.push.enabled=true

# ================================================================
# LOGGING CONFIGURATION
# ================================================================

# Root logging level
logging.level.root=INFO
logging.level.aws.movie_ticket_sales_web_project=DEBUG
logging.level.org.springframework.security=DEBUG
logging.level.org.springframework.web=DEBUG
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE

# Log file configuration
logging.file.name=logs/movie-ticket-sales.log
logging.file.max-size=10MB
logging.file.max-history=30
logging.pattern.console=%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n
logging.pattern.file=%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n

# ================================================================
# DEVELOPMENT PROFILES
# ================================================================

# Development specific settings
---
spring.config.activate.on-profile=dev

spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto=update

logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE

# Test Data Loading
app.data.load-sample-data=true

# Development Database (H2 for quick testing)
# spring.datasource.url=jdbc:h2:mem:testdb
# spring.datasource.driver-class-name=org.h2.Driver
# spring.h2.console.enabled=true

# ================================================================
# PRODUCTION PROFILES  
# ================================================================

# Production specific settings
---
spring.config.activate.on-profile=prod

spring.jpa.show-sql=false
logging.level.root=WARN
logging.level.aws.movie_ticket_sales_web_project=INFO

# Production Database Configuration
spring.datasource.url=jdbc:mysql://prod-db-server:3306/movie_ticket_sales?useSSL=true&requireSSL=true&serverTimezone=Asia/Ho_Chi_Minh
spring.datasource.username=${DB_USERNAME}
spring.datasource.password=${DB_PASSWORD}

# Production Connection Pool
spring.datasource.hikari.maximum-pool-size=50
spring.datasource.hikari.minimum-idle=10

# Security Headers
server.servlet.session.cookie.secure=true
server.servlet.session.cookie.http-only=true
server.servlet.session.cookie.same-site=strict

# ================================================================
# TEST PROFILES
# ================================================================

# Test specific settings
---
spring.config.activate.on-profile=test

# Test Database (H2 in-memory)
spring.datasource.url=jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
spring.datasource.username=sa
spring.datasource.password=
spring.datasource.driver-class-name=org.h2.Driver

spring.jpa.hibernate.ddl-auto=create-drop
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect

# Disable external services in test
app.payment.vnpay.enabled=false
app.notification.email.enabled=false
app.notification.sms.enabled=false
```

2.2. Cấu hình application.yml (Alternative)
---------------------------------------

Nếu bạn prefer YAML format, tạo file `application.yml`:

```yaml
spring:
  application:
    name: Movie Ticket Sales Web Project
  
  datasource:
    url: jdbc:mysql://localhost:3306/movie_ticket_sales?useSSL=false&serverTimezone=Asia/Ho_Chi_Minh&allowPublicKeyRetrieval=true&useUnicode=true&characterEncoding=utf8mb4
    username: movie_app_user
    password: MovieTicket2025!
    driver-class-name: com.mysql.cj.jdbc.Driver
    
    hikari:
      connection-timeout: 20000
      minimum-idle: 5
      maximum-pool-size: 20
      idle-timeout: 300000
      max-lifetime: 1200000
      auto-commit: true
  
  jpa:
    database-platform: org.hibernate.dialect.MySQL8Dialect
    hibernate:
      ddl-auto: validate
    show-sql: false
    properties:
      hibernate:
        format_sql: true
        use_sql_comments: true
        jdbc:
          batch_size: 20
        order_inserts: true
        order_updates: true

  jackson:
    date-format: yyyy-MM-dd HH:mm:ss
    time-zone: Asia/Ho_Chi_Minh
    locale: vi_VN
    serialization:
      write-dates-as-timestamps: false
      fail-on-empty-beans: false

server:
  port: 8080
  servlet:
    context-path: /api/v1
    encoding:
      charset: UTF-8
      enabled: true
      force: true

jwt:
  secret: MovieTicketSalesSecretKey2025!ThisIsAVeryLongSecretKeyForJWTTokenGeneration
  expiration: 86400000
  refresh-expiration: 604800000

app:
  booking:
    seat-hold-duration-minutes: 10
    max-tickets-per-booking: 8
    cancel-deadline-minutes: 60
    service-fee-percentage: 3.0
  
  loyalty:
    points-to-vnd-rate: 1000
    default-earn-rate: 1.0
    points-expiry-months: 24

logging:
  level:
    root: INFO
    aws.movie_ticket_sales_web_project: DEBUG
    org.springframework.security: DEBUG
    org.hibernate.SQL: DEBUG
  file:
    name: logs/movie-ticket-sales.log
    max-size: 10MB
    max-history: 30

---
spring:
  config:
    activate:
      on-profile: dev
  jpa:
    show-sql: true
    hibernate:
      ddl-auto: update

app:
  data:
    load-sample-data: true

---
spring:
  config:
    activate:
      on-profile: prod
  jpa:
    show-sql: false
  datasource:
    url: jdbc:mysql://prod-db-server:3306/movie_ticket_sales?useSSL=true&requireSSL=true&serverTimezone=Asia/Ho_Chi_Minh
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}

logging:
  level:
    root: WARN
    aws.movie_ticket_sales_web_project: INFO
```

=================================================================
3. DEPENDENCY MANAGEMENT (pom.xml)
=================================================================

Cập nhật file `pom.xml` để include các dependencies cần thiết:

```xml
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
         https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.2.0</version>
        <relativePath/>
    </parent>
    
    <groupId>aws</groupId>
    <artifactId>movie-ticket-sales-web-project</artifactId>
    <version>1.0.0</version>
    <name>Movie Ticket Sales Web Project</name>
    <description>Movie Ticket Sales Web Project for Vietnam Market</description>
    
    <properties>
        <java.version>17</java.version>
        <maven.compiler.source>17</maven.compiler.source>
        <maven.compiler.target>17</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        
        <!-- Library Versions -->
        <mysql.version>8.0.33</mysql.version>
        <lombok.version>1.18.30</lombok.version>
        <mapstruct.version>1.5.5.Final</mapstruct.version>
        <jwt.version>4.4.0</jwt.version>
        <springdoc.version>2.2.0</springdoc.version>
    </properties>
    
    <dependencies>
        <!-- Spring Boot Starters -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>
        
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-security</artifactId>
        </dependency>
        
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-validation</artifactId>
        </dependency>
        
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-mail</artifactId>
        </dependency>
        
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-cache</artifactId>
        </dependency>
        
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>
        
        <!-- Database -->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>${mysql.version}</version>
        </dependency>
        
        <!-- Redis for Caching -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-redis</artifactId>
        </dependency>
        
        <!-- JWT -->
        <dependency>
            <groupId>com.auth0</groupId>
            <artifactId>java-jwt</artifactId>
            <version>${jwt.version}</version>
        </dependency>
        
        <!-- Lombok -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>${lombok.version}</version>
            <scope>provided</scope>
        </dependency>
        
        <!-- MapStruct for DTO Mapping -->
        <dependency>
            <groupId>org.mapstruct</groupId>
            <artifactId>mapstruct</artifactId>
            <version>${mapstruct.version}</version>
        </dependency>
        <dependency>
            <groupId>org.mapstruct</groupId>
            <artifactId>mapstruct-processor</artifactId>
            <version>${mapstruct.version}</version>
            <scope>provided</scope>
        </dependency>
        
        <!-- API Documentation -->
        <dependency>
            <groupId>org.springdoc</groupId>
            <artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
            <version>${springdoc.version}</version>
        </dependency>
        
        <!-- JSON Processing -->
        <dependency>
            <groupId>com.fasterxml.jackson.datatype</groupId>
            <artifactId>jackson-datatype-jsr310</artifactId>
        </dependency>
        
        <!-- QR Code Generation -->
        <dependency>
            <groupId>com.google.zxing</groupId>
            <artifactId>core</artifactId>
            <version>3.5.2</version>
        </dependency>
        <dependency>
            <groupId>com.google.zxing</groupId>
            <artifactId>javase</artifactId>
            <version>3.5.2</version>
        </dependency>
        
        <!-- Apache Commons -->
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
        </dependency>
        
        <!-- Testing -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
        
        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-test</artifactId>
            <scope>test</scope>
        </dependency>
        
        <dependency>
            <groupId>com.h2database</groupId>
            <artifactId>h2</artifactId>
            <scope>test</scope>
        </dependency>
        
        <!-- Development Tools -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <scope>runtime</scope>
            <optional>true</optional>
        </dependency>
    </dependencies>
    
    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <excludes>
                        <exclude>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                        </exclude>
                    </excludes>
                </configuration>
            </plugin>
            
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.11.0</version>
                <configuration>
                    <source>17</source>
                    <target>17</target>
                    <annotationProcessorPaths>
                        <path>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                            <version>${lombok.version}</version>
                        </path>
                        <path>
                            <groupId>org.mapstruct</groupId>
                            <artifactId>mapstruct-processor</artifactId>
                            <version>${mapstruct.version}</version>
                        </path>
                    </annotationProcessorPaths>
                </configuration>
            </plugin>
            
            <!-- Flyway for Database Migrations -->
            <plugin>
                <groupId>org.flywaydb</groupId>
                <artifactId>flyway-maven-plugin</artifactId>
                <version>9.22.3</version>
                <configuration>
                    <url>jdbc:mysql://localhost:3306/movie_ticket_sales</url>
                    <user>movie_app_user</user>
                    <password>MovieTicket2025!</password>
                </configuration>
            </plugin>
            
            <!-- Surefire for Unit Tests -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>3.2.2</version>
                <configuration>
                    <includes>
                        <include>**/*Test.java</include>
                        <include>**/*Tests.java</include>
                    </includes>
                </configuration>
            </plugin>
        </plugins>
    </build>
    
    <repositories>
        <repository>
            <id>spring-milestones</id>
            <name>Spring Milestones</name>
            <url>https://repo.spring.io/milestone</url>
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
        </repository>
    </repositories>
    
    <pluginRepositories>
        <pluginRepository>
            <id>spring-milestones</id>
            <name>Spring Milestones</name>
            <url>https://repo.spring.io/milestone</url>
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
        </pluginRepository>
    </pluginRepositories>
</project>
```

=================================================================
4. MAIN APPLICATION CLASS CONFIGURATION
=================================================================

Cập nhật `MovieTicketSalesWebProjectApplication.java`:

```java
package aws.movie_ticket_sales_web_project;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.cache.annotation.EnableCaching;
import org.springframework.data.jpa.repository.config.EnableJpaAuditing;
import org.springframework.data.jpa.repository.config.EnableJpaRepositories;
import org.springframework.scheduling.annotation.EnableAsync;
import org.springframework.scheduling.annotation.EnableScheduling;
import org.springframework.transaction.annotation.EnableTransactionManagement;

@SpringBootApplication
@EnableJpaRepositories(basePackages = "aws.movie_ticket_sales_web_project.repository")
@EnableJpaAuditing(auditorAwareRef = "auditorProvider")
@EnableTransactionManagement
@EnableCaching
@EnableAsync
@EnableScheduling
public class MovieTicketSalesWebProjectApplication {

    public static void main(String[] args) {
        SpringApplication.run(MovieTicketSalesWebProjectApplication.class, args);
        
        System.out.println("========================================");
        System.out.println("🎬 Movie Ticket Sales Application Started");
        System.out.println("🌐 Server: http://localhost:8080/api/v1");  
        System.out.println("📚 API Docs: http://localhost:8080/api/v1/swagger-ui.html");
        System.out.println("🏥 Health Check: http://localhost:8080/api/v1/actuator/health");
        System.out.println("========================================");
    }
}
```

=================================================================
5. CONFIGURATION CLASSES
=================================================================

5.1. Database Configuration Class
---------------------------------------

Tạo file `src/main/java/aws/movie_ticket_sales_web_project/config/DatabaseConfig.java`:

```java
package aws.movie_ticket_sales_web_project.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.data.domain.AuditorAware;
import org.springframework.data.jpa.repository.config.EnableJpaAuditing;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;

import javax.sql.DataSource;
import java.util.Optional;

@Configuration
@EnableJpaAuditing(auditorAwareRef = "auditorProvider")
public class DatabaseConfig {

    @Bean
    public AuditorAware<Long> auditorProvider() {
        return new AuditorAwareImpl();
    }

    private static class AuditorAwareImpl implements AuditorAware<Long> {
        @Override
        public Optional<Long> getCurrentAuditor() {
            Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
            
            if (authentication == null || !authentication.isAuthenticated() || 
                authentication.getPrincipal().equals("anonymousUser")) {
                return Optional.empty();
            }

            if (authentication.getPrincipal() instanceof UserDetails) {
                // Extract user ID from UserDetails implementation
                // This assumes your User entity implements UserDetails
                UserDetails userDetails = (UserDetails) authentication.getPrincipal();
                // You need to implement getUserId() method in your User entity
                // return Optional.of(((User) userDetails).getUserId());
                return Optional.of(1L); // Placeholder - implement properly
            }

            return Optional.empty();
        }
    }
}
```

5.2. Web Configuration Class
---------------------------------------

Tạo file `src/main/java/aws/movie_ticket_sales_web_project/config/WebConfig.java`:

```java
package aws.movie_ticket_sales_web_project.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.cors.CorsConfigurationSource;
import org.springframework.web.cors.UrlBasedCorsConfigurationSource;
import org.springframework.web.servlet.config.annotation.CorsRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;

import java.util.Arrays;

@Configuration
public class WebConfig implements WebMvcConfigurer {

    @Override
    public void addCorsMappings(CorsRegistry registry) {
        registry.addMapping("/api/**")
                .allowedOriginPatterns("*")
                .allowedMethods("GET", "POST", "PUT", "DELETE", "OPTIONS")
                .allowedHeaders("*")
                .allowCredentials(true);
    }

    @Bean
    public CorsConfigurationSource corsConfigurationSource() {
        CorsConfiguration configuration = new CorsConfiguration();
        configuration.setAllowedOriginPatterns(Arrays.asList("*"));
        configuration.setAllowedMethods(Arrays.asList("GET", "POST", "PUT", "DELETE", "OPTIONS"));
        configuration.setAllowedHeaders(Arrays.asList("*"));
        configuration.setAllowCredentials(true);
        
        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
        source.registerCorsConfiguration("/**", configuration);
        return source;
    }
}
```

=================================================================
6. TESTING DATABASE CONNECTION
=================================================================

6.1. Tạo Test Repository
---------------------------------------

Tạo file `src/test/java/aws/movie_ticket_sales_web_project/DatabaseConnectionTest.java`:

```java
package aws.movie_ticket_sales_web_project;

import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.ActiveProfiles;

import javax.sql.DataSource;
import java.sql.Connection;
import java.sql.SQLException;

import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertTrue;

@SpringBootTest
@ActiveProfiles("test")
class DatabaseConnectionTest {

    @Autowired
    private DataSource dataSource;

    @Test
    void testDatabaseConnection() throws SQLException {
        assertNotNull(dataSource);
        
        try (Connection connection = dataSource.getConnection()) {
            assertNotNull(connection);
            assertTrue(connection.isValid(5));
            System.out.println("✅ Database connection successful!");
            System.out.println("📊 Database URL: " + connection.getMetaData().getURL());
            System.out.println("👤 Database User: " + connection.getMetaData().getUserName());
        }
    }
}
```

6.2. Run Application Test
---------------------------------------

```bash
# Test với Maven
mvn test

# Chạy ứng dụng
mvn spring-boot:run

# Hoặc với specific profile
mvn spring-boot:run -Dspring-boot.run.profiles=dev
```

=================================================================
7. DOCKER SETUP (Optional)
=================================================================

7.1. Dockerfile
---------------------------------------

Tạo file `Dockerfile` ở root project:

```dockerfile
FROM openjdk:17-jdk-slim

LABEL maintainer="movie-ticket-sales-team"
LABEL description="Movie Ticket Sales Web Application"

# Set working directory
WORKDIR /app

# Copy Maven dependencies (for layer caching)
COPY .mvn/ .mvn/
COPY mvnw pom.xml ./

# Download dependencies
RUN ./mvnw dependency:go-offline -B

# Copy source code
COPY src ./src

# Build application
RUN ./mvnw clean package -DskipTests

# Rename JAR file
RUN mv target/*.jar app.jar

# Expose port
EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:8080/api/v1/actuator/health || exit 1

# Run application
ENTRYPOINT ["java", "-jar", "app.jar"]
```

7.2. docker-compose.yml
---------------------------------------

Tạo file `docker-compose.yml`:

```yaml
version: '3.8'

services:
  mysql:
    image: mysql:8.0
    container_name: movie-ticket-mysql
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: movie_ticket_sales
      MYSQL_USER: movie_app_user
      MYSQL_PASSWORD: MovieTicket2025!
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./docs/database.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - movie-ticket-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  redis:
    image: redis:7-alpine
    container_name: movie-ticket-redis
    ports:
      - "6379:6379"
    networks:
      - movie-ticket-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  app:
    build: .
    container_name: movie-ticket-app
    environment:
      SPRING_PROFILES_ACTIVE: docker
      DB_HOST: mysql
      DB_PORT: 3306
      DB_NAME: movie_ticket_sales
      DB_USERNAME: movie_app_user
      DB_PASSWORD: MovieTicket2025!
      REDIS_HOST: redis
      REDIS_PORT: 6379
    ports:
      - "8080:8080"
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - movie-ticket-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/v1/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  mysql_data:
    driver: local

networks:
  movie-ticket-network:
    driver: bridge
```

7.3. Chạy với Docker
---------------------------------------

```bash
# Build và chạy tất cả services
docker-compose up --build

# Chạy trong background
docker-compose up -d

# Xem logs
docker-compose logs -f app

# Stop services
docker-compose down

# Clean up (remove volumes)
docker-compose down -v
```

=================================================================
8. ENVIRONMENT VARIABLES SETUP
=================================================================

8.1. Tạo .env file
---------------------------------------

Tạo file `.env` ở root project (add vào .gitignore):

```bash
# Database Configuration
DB_HOST=localhost
DB_PORT=3306
DB_NAME=movie_ticket_sales
DB_USERNAME=movie_app_user
DB_PASSWORD=MovieTicket2025!

# JWT Configuration
JWT_SECRET=MovieTicketSalesSecretKey2025!ThisIsAVeryLongSecretKeyForJWTTokenGeneration
JWT_EXPIRATION=86400000

# Redis Configuration
REDIS_HOST=localhost
REDIS_PORT=6379

# Email Configuration
MAIL_HOST=smtp.gmail.com
MAIL_PORT=587
MAIL_USERNAME=your-email@gmail.com
MAIL_PASSWORD=your-app-password

# Payment Gateway Configuration
VNPAY_TMN_CODE=your-vnpay-code
VNPAY_SECRET_KEY=your-vnpay-secret
MOMO_PARTNER_CODE=your-momo-partner-code
MOMO_SECRET_KEY=your-momo-secret

# File Storage
FILE_UPLOAD_PATH=/uploads
MAX_FILE_SIZE=10MB
```

8.2. Load Environment Variables in Spring Boot
---------------------------------------

Cập nhật `application.properties`:

```properties
# Use environment variables
spring.datasource.url=jdbc:mysql://${DB_HOST:localhost}:${DB_PORT:3306}/${DB_NAME:movie_ticket_sales}?useSSL=false&serverTimezone=Asia/Ho_Chi_Minh
spring.datasource.username=${DB_USERNAME:movie_app_user}
spring.datasource.password=${DB_PASSWORD:MovieTicket2025!}

jwt.secret=${JWT_SECRET:defaultSecretKey}
jwt.expiration=${JWT_EXPIRATION:86400000}

spring.data.redis.host=${REDIS_HOST:localhost}
spring.data.redis.port=${REDIS_PORT:6379}

spring.mail.host=${MAIL_HOST:smtp.gmail.com}
spring.mail.port=${MAIL_PORT:587}
spring.mail.username=${MAIL_USERNAME:}
spring.mail.password=${MAIL_PASSWORD:}
```

=================================================================
9. TROUBLESHOOTING
=================================================================

9.1. Common Issues & Solutions
---------------------------------------

**Issue 1: MySQL Connection Failed**
```
Solution:
1. Kiểm tra MySQL service đang chạy
2. Verify username/password
3. Check firewall settings
4. Ensure database exists

Commands:
sudo systemctl status mysql
mysql -u root -p
SHOW DATABASES;
```

**Issue 2: Port 8080 Already in Use**
```
Solution:
1. Change port in application.properties:
   server.port=8081
   
2. Or kill process using port 8080:
   sudo lsof -t -i:8080 | xargs sudo kill -9
```

**Issue 3: JPA Entity Mapping Issues**
```
Solution:
1. Check entity annotations
2. Verify table names match database
3. Enable SQL logging:
   spring.jpa.show-sql=true
   logging.level.org.hibernate.SQL=DEBUG
```

**Issue 4: Spring Security Issues**
```
Solution:
1. Check if security config is properly set
2. Verify JWT token format
3. Enable security debug:
   logging.level.org.springframework.security=DEBUG
```

9.2. Health Checks
---------------------------------------

**Database Health Check:**
```bash
curl http://localhost:8080/api/v1/actuator/health
```

**Manual Database Test:**
```bash
mysql -u movie_app_user -p -h localhost -P 3306 movie_ticket_sales
```

**Application Startup Verification:**
```bash
# Check if all tables are created
mysql> USE movie_ticket_sales;
mysql> SHOW TABLES;
mysql> SELECT COUNT(*) FROM users;
```

=================================================================
10. NEXT STEPS
=================================================================

Sau khi setup database và configuration thành công:

1. ✅ **Create Entity Classes** - Implement all JPA entities
2. ✅ **Create Repository Interfaces** - Setup Spring Data repositories  
3. ✅ **Create Service Layer** - Business logic implementation
4. ✅ **Create Controller Layer** - REST API endpoints
5. ✅ **Setup Security Configuration** - JWT authentication
6. ✅ **Create DTOs and Mappers** - Data transfer objects
7. ✅ **Add Validation** - Input validation and error handling
8. ✅ **Setup Testing** - Unit and integration tests
9. ✅ **Add Documentation** - API documentation with Swagger
10. ✅ **Implement Frontend** - React.js frontend application

=================================================================
END OF DATABASE SETUP GUIDE
=================================================================